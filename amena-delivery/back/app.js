const app = require('./app');
const { sequelize } = require('./models');
const logger = require('./utils/logger');
const cron = require('node-cron');
const { processAutomaticPayments, recoverPendingTransactions } = require('./utils/automaticProcessing');

const PORT = process.env.PORT || 3001;

// Fonction de d√©marrage du serveur
async function startServer() {
  try {
    // Connexion √† la base de donn√©es
    await sequelize.authenticate();
    logger.info('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Synchronisation des mod√®les (development uniquement)
    if (process.env.NODE_ENV !== 'production') {
      await sequelize.sync({ alter: true });
      logger.info('‚úÖ Mod√®les synchronis√©s');
    }

    // D√©marrage du serveur
    app.listen(PORT, () => {
      logger.info(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
      logger.info(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
      
      // Jobs automatiques
      setupCronJobs();
    });

  } catch (error) {
    logger.error('‚ùå Erreur de d√©marrage du serveur:', error);
    process.exit(1);
  }
}

// Configuration des t√¢ches automatiques
function setupCronJobs() {
  // Traitement automatique des paiements √† 22h00 tous les jours
  cron.schedule('0 22 * * *', async () => {
    logger.info('üïô D√©marrage du traitement automatique 22h00');
    try {
      await processAutomaticPayments();
      logger.info('‚úÖ Traitement automatique 22h00 termin√©');
    } catch (error) {
      logger.error('‚ùå Erreur traitement automatique 22h00:', error);
    }
  }, {
    scheduled: true,
    timezone: "Africa/Tunis"
  });

  // R√©cup√©ration des transactions en attente toutes les 5 minutes
  cron.schedule('*/5 * * * *', async () => {
    try {
      await recoverPendingTransactions();
    } catch (error) {
      logger.error('‚ùå Erreur r√©cup√©ration transactions:', error);
    }
  });

  logger.info('‚è∞ Jobs automatiques configur√©s');
}

// Gestion gracieuse de l'arr√™t
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

async function gracefulShutdown(signal) {
  logger.info(`üì° Signal ${signal} re√ßu, arr√™t en cours...`);
  
  try {
    await sequelize.close();
    logger.info('‚úÖ Connexion base de donn√©es ferm√©e');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Erreur lors de l\'arr√™t:', error);
    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Rejection non g√©r√©e:', { reason, promise });
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// D√©marrage
startServer();